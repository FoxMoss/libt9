/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: t9db.proto */

#ifndef PROTOBUF_C_t9db_2eproto__INCLUDED
#define PROTOBUF_C_t9db_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protobuf-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1005002 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protobuf-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protobuf-c.
#endif


typedef struct TokenEdge TokenEdge;
typedef struct Token Token;
typedef struct TrieNode TrieNode;
typedef struct T9Database T9Database;


/* --- enums --- */


/* --- messages --- */

struct  TokenEdge
{
  ProtobufCMessage base;
  int32_t target_id;
  uint32_t freq;
};
#define TOKEN_EDGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&token_edge__descriptor) \
    , 0, 0 }


struct  Token
{
  ProtobufCMessage base;
  int32_t id;
  uint32_t freq;
  char *value;
  size_t n_edges;
  TokenEdge **edges;
};
#define TOKEN__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&token__descriptor) \
    , 0, 0, NULL, 0,NULL }


struct  TrieNode
{
  ProtobufCMessage base;
  protobuf_c_boolean has_node_index;
  uint32_t node_index;
  /*
   * ascii but a single byte wasnt possible
   */
  uint32_t character;
  uint32_t freq;
  size_t n_tokens;
  int32_t *tokens;
  size_t n_children;
  uint32_t *children;
};
#define TRIE_NODE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&trie_node__descriptor) \
    , 0, 0, 0, 0, 0,NULL, 0,NULL }


struct  T9Database
{
  ProtobufCMessage base;
  size_t n_tokens;
  Token **tokens;
  size_t n_roots;
  TrieNode **roots;
};
#define T9_DATABASE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&t9_database__descriptor) \
    , 0,NULL, 0,NULL }


/* TokenEdge methods */
void   token_edge__init
                     (TokenEdge         *message);
size_t token_edge__get_packed_size
                     (const TokenEdge   *message);
size_t token_edge__pack
                     (const TokenEdge   *message,
                      uint8_t             *out);
size_t token_edge__pack_to_buffer
                     (const TokenEdge   *message,
                      ProtobufCBuffer     *buffer);
TokenEdge *
       token_edge__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   token_edge__free_unpacked
                     (TokenEdge *message,
                      ProtobufCAllocator *allocator);
/* Token methods */
void   token__init
                     (Token         *message);
size_t token__get_packed_size
                     (const Token   *message);
size_t token__pack
                     (const Token   *message,
                      uint8_t             *out);
size_t token__pack_to_buffer
                     (const Token   *message,
                      ProtobufCBuffer     *buffer);
Token *
       token__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   token__free_unpacked
                     (Token *message,
                      ProtobufCAllocator *allocator);
/* TrieNode methods */
void   trie_node__init
                     (TrieNode         *message);
size_t trie_node__get_packed_size
                     (const TrieNode   *message);
size_t trie_node__pack
                     (const TrieNode   *message,
                      uint8_t             *out);
size_t trie_node__pack_to_buffer
                     (const TrieNode   *message,
                      ProtobufCBuffer     *buffer);
TrieNode *
       trie_node__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   trie_node__free_unpacked
                     (TrieNode *message,
                      ProtobufCAllocator *allocator);
/* T9Database methods */
void   t9_database__init
                     (T9Database         *message);
size_t t9_database__get_packed_size
                     (const T9Database   *message);
size_t t9_database__pack
                     (const T9Database   *message,
                      uint8_t             *out);
size_t t9_database__pack_to_buffer
                     (const T9Database   *message,
                      ProtobufCBuffer     *buffer);
T9Database *
       t9_database__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   t9_database__free_unpacked
                     (T9Database *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*TokenEdge_Closure)
                 (const TokenEdge *message,
                  void *closure_data);
typedef void (*Token_Closure)
                 (const Token *message,
                  void *closure_data);
typedef void (*TrieNode_Closure)
                 (const TrieNode *message,
                  void *closure_data);
typedef void (*T9Database_Closure)
                 (const T9Database *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor token_edge__descriptor;
extern const ProtobufCMessageDescriptor token__descriptor;
extern const ProtobufCMessageDescriptor trie_node__descriptor;
extern const ProtobufCMessageDescriptor t9_database__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_t9db_2eproto__INCLUDED */
