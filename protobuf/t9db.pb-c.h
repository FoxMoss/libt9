/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: t9db.proto */

#ifndef PROTOBUF_C_t9db_2eproto__INCLUDED
#define PROTOBUF_C_t9db_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protobuf-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1005002 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protobuf-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protobuf-c.
#endif


typedef struct StoredWord StoredWord;
typedef struct StoredTokenEdge StoredTokenEdge;
typedef struct StoredToken StoredToken;
typedef struct StoredTrieNode StoredTrieNode;
typedef struct T9Database T9Database;


/* --- enums --- */


/* --- messages --- */

struct  StoredWord
{
  ProtobufCMessage base;
  char *word;
  uint32_t freq;
};
#define STORED_WORD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&stored_word__descriptor) \
    , NULL, 0 }


struct  StoredTokenEdge
{
  ProtobufCMessage base;
  int32_t target_id;
  uint32_t freq;
};
#define STORED_TOKEN_EDGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&stored_token_edge__descriptor) \
    , 0, 0 }


struct  StoredToken
{
  ProtobufCMessage base;
  int32_t id;
  uint32_t freq;
  char *value;
  size_t n_edges;
  StoredTokenEdge **edges;
};
#define STORED_TOKEN__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&stored_token__descriptor) \
    , 0, 0, NULL, 0,NULL }


struct  StoredTrieNode
{
  ProtobufCMessage base;
  protobuf_c_boolean has_node_index;
  uint32_t node_index;
  /*
   * ascii but a single byte wasnt possible
   */
  uint32_t character;
  uint32_t freq;
  size_t n_tokens;
  int32_t *tokens;
  size_t n_children;
  uint32_t *children;
  size_t n_words;
  StoredWord **words;
};
#define STORED_TRIE_NODE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&stored_trie_node__descriptor) \
    , 0, 0, 0, 0, 0,NULL, 0,NULL, 0,NULL }


struct  T9Database
{
  ProtobufCMessage base;
  size_t n_tokens;
  StoredToken **tokens;
  size_t n_roots;
  StoredTrieNode **roots;
};
#define T9_DATABASE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&t9_database__descriptor) \
    , 0,NULL, 0,NULL }


/* StoredWord methods */
void   stored_word__init
                     (StoredWord         *message);
size_t stored_word__get_packed_size
                     (const StoredWord   *message);
size_t stored_word__pack
                     (const StoredWord   *message,
                      uint8_t             *out);
size_t stored_word__pack_to_buffer
                     (const StoredWord   *message,
                      ProtobufCBuffer     *buffer);
StoredWord *
       stored_word__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   stored_word__free_unpacked
                     (StoredWord *message,
                      ProtobufCAllocator *allocator);
/* StoredTokenEdge methods */
void   stored_token_edge__init
                     (StoredTokenEdge         *message);
size_t stored_token_edge__get_packed_size
                     (const StoredTokenEdge   *message);
size_t stored_token_edge__pack
                     (const StoredTokenEdge   *message,
                      uint8_t             *out);
size_t stored_token_edge__pack_to_buffer
                     (const StoredTokenEdge   *message,
                      ProtobufCBuffer     *buffer);
StoredTokenEdge *
       stored_token_edge__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   stored_token_edge__free_unpacked
                     (StoredTokenEdge *message,
                      ProtobufCAllocator *allocator);
/* StoredToken methods */
void   stored_token__init
                     (StoredToken         *message);
size_t stored_token__get_packed_size
                     (const StoredToken   *message);
size_t stored_token__pack
                     (const StoredToken   *message,
                      uint8_t             *out);
size_t stored_token__pack_to_buffer
                     (const StoredToken   *message,
                      ProtobufCBuffer     *buffer);
StoredToken *
       stored_token__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   stored_token__free_unpacked
                     (StoredToken *message,
                      ProtobufCAllocator *allocator);
/* StoredTrieNode methods */
void   stored_trie_node__init
                     (StoredTrieNode         *message);
size_t stored_trie_node__get_packed_size
                     (const StoredTrieNode   *message);
size_t stored_trie_node__pack
                     (const StoredTrieNode   *message,
                      uint8_t             *out);
size_t stored_trie_node__pack_to_buffer
                     (const StoredTrieNode   *message,
                      ProtobufCBuffer     *buffer);
StoredTrieNode *
       stored_trie_node__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   stored_trie_node__free_unpacked
                     (StoredTrieNode *message,
                      ProtobufCAllocator *allocator);
/* T9Database methods */
void   t9_database__init
                     (T9Database         *message);
size_t t9_database__get_packed_size
                     (const T9Database   *message);
size_t t9_database__pack
                     (const T9Database   *message,
                      uint8_t             *out);
size_t t9_database__pack_to_buffer
                     (const T9Database   *message,
                      ProtobufCBuffer     *buffer);
T9Database *
       t9_database__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   t9_database__free_unpacked
                     (T9Database *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*StoredWord_Closure)
                 (const StoredWord *message,
                  void *closure_data);
typedef void (*StoredTokenEdge_Closure)
                 (const StoredTokenEdge *message,
                  void *closure_data);
typedef void (*StoredToken_Closure)
                 (const StoredToken *message,
                  void *closure_data);
typedef void (*StoredTrieNode_Closure)
                 (const StoredTrieNode *message,
                  void *closure_data);
typedef void (*T9Database_Closure)
                 (const T9Database *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor stored_word__descriptor;
extern const ProtobufCMessageDescriptor stored_token_edge__descriptor;
extern const ProtobufCMessageDescriptor stored_token__descriptor;
extern const ProtobufCMessageDescriptor stored_trie_node__descriptor;
extern const ProtobufCMessageDescriptor t9_database__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_t9db_2eproto__INCLUDED */
