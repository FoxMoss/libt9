// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: t9db.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_t9db_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_t9db_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_t9db_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_t9db_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_t9db_2eproto;
class T9Database;
class T9DatabaseDefaultTypeInternal;
extern T9DatabaseDefaultTypeInternal _T9Database_default_instance_;
class Token;
class TokenDefaultTypeInternal;
extern TokenDefaultTypeInternal _Token_default_instance_;
class TokenEdge;
class TokenEdgeDefaultTypeInternal;
extern TokenEdgeDefaultTypeInternal _TokenEdge_default_instance_;
class TrieNode;
class TrieNodeDefaultTypeInternal;
extern TrieNodeDefaultTypeInternal _TrieNode_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::T9Database* Arena::CreateMaybeMessage<::T9Database>(Arena*);
template<> ::Token* Arena::CreateMaybeMessage<::Token>(Arena*);
template<> ::TokenEdge* Arena::CreateMaybeMessage<::TokenEdge>(Arena*);
template<> ::TrieNode* Arena::CreateMaybeMessage<::TrieNode>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class TokenEdge PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TokenEdge) */ {
 public:
  inline TokenEdge() : TokenEdge(nullptr) {};
  virtual ~TokenEdge();

  TokenEdge(const TokenEdge& from);
  TokenEdge(TokenEdge&& from) noexcept
    : TokenEdge() {
    *this = ::std::move(from);
  }

  inline TokenEdge& operator=(const TokenEdge& from) {
    CopyFrom(from);
    return *this;
  }
  inline TokenEdge& operator=(TokenEdge&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TokenEdge& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TokenEdge* internal_default_instance() {
    return reinterpret_cast<const TokenEdge*>(
               &_TokenEdge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TokenEdge& a, TokenEdge& b) {
    a.Swap(&b);
  }
  inline void Swap(TokenEdge* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TokenEdge* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TokenEdge* New() const final {
    return CreateMaybeMessage<TokenEdge>(nullptr);
  }

  TokenEdge* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TokenEdge>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TokenEdge& from);
  void MergeFrom(const TokenEdge& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TokenEdge* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TokenEdge";
  }
  protected:
  explicit TokenEdge(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_t9db_2eproto);
    return ::descriptor_table_t9db_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetIdFieldNumber = 1,
    kFreqFieldNumber = 2,
  };
  // required int32 target_id = 1;
  bool has_target_id() const;
  private:
  bool _internal_has_target_id() const;
  public:
  void clear_target_id();
  ::PROTOBUF_NAMESPACE_ID::int32 target_id() const;
  void set_target_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_target_id() const;
  void _internal_set_target_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required uint32 freq = 2;
  bool has_freq() const;
  private:
  bool _internal_has_freq() const;
  public:
  void clear_freq();
  ::PROTOBUF_NAMESPACE_ID::uint32 freq() const;
  void set_freq(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_freq() const;
  void _internal_set_freq(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TokenEdge)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 target_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 freq_;
  friend struct ::TableStruct_t9db_2eproto;
};
// -------------------------------------------------------------------

class Token PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Token) */ {
 public:
  inline Token() : Token(nullptr) {};
  virtual ~Token();

  Token(const Token& from);
  Token(Token&& from) noexcept
    : Token() {
    *this = ::std::move(from);
  }

  inline Token& operator=(const Token& from) {
    CopyFrom(from);
    return *this;
  }
  inline Token& operator=(Token&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Token& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Token* internal_default_instance() {
    return reinterpret_cast<const Token*>(
               &_Token_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Token& a, Token& b) {
    a.Swap(&b);
  }
  inline void Swap(Token* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Token* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Token* New() const final {
    return CreateMaybeMessage<Token>(nullptr);
  }

  Token* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Token>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Token& from);
  void MergeFrom(const Token& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Token* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Token";
  }
  protected:
  explicit Token(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_t9db_2eproto);
    return ::descriptor_table_t9db_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEdgesFieldNumber = 4,
    kValueFieldNumber = 3,
    kIdFieldNumber = 1,
    kFreqFieldNumber = 2,
  };
  // repeated .TokenEdge edges = 4;
  int edges_size() const;
  private:
  int _internal_edges_size() const;
  public:
  void clear_edges();
  ::TokenEdge* mutable_edges(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TokenEdge >*
      mutable_edges();
  private:
  const ::TokenEdge& _internal_edges(int index) const;
  ::TokenEdge* _internal_add_edges();
  public:
  const ::TokenEdge& edges(int index) const;
  ::TokenEdge* add_edges();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TokenEdge >&
      edges() const;

  // required string value = 3;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_value();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_value(
      std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // required int32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required uint32 freq = 2;
  bool has_freq() const;
  private:
  bool _internal_has_freq() const;
  public:
  void clear_freq();
  ::PROTOBUF_NAMESPACE_ID::uint32 freq() const;
  void set_freq(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_freq() const;
  void _internal_set_freq(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Token)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TokenEdge > edges_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 freq_;
  friend struct ::TableStruct_t9db_2eproto;
};
// -------------------------------------------------------------------

class TrieNode PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TrieNode) */ {
 public:
  inline TrieNode() : TrieNode(nullptr) {};
  virtual ~TrieNode();

  TrieNode(const TrieNode& from);
  TrieNode(TrieNode&& from) noexcept
    : TrieNode() {
    *this = ::std::move(from);
  }

  inline TrieNode& operator=(const TrieNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrieNode& operator=(TrieNode&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrieNode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrieNode* internal_default_instance() {
    return reinterpret_cast<const TrieNode*>(
               &_TrieNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TrieNode& a, TrieNode& b) {
    a.Swap(&b);
  }
  inline void Swap(TrieNode* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrieNode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrieNode* New() const final {
    return CreateMaybeMessage<TrieNode>(nullptr);
  }

  TrieNode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrieNode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrieNode& from);
  void MergeFrom(const TrieNode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrieNode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TrieNode";
  }
  protected:
  explicit TrieNode(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_t9db_2eproto);
    return ::descriptor_table_t9db_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokensFieldNumber = 4,
    kChildrenFieldNumber = 5,
    kNodeIndexFieldNumber = 1,
    kCharacterFieldNumber = 2,
    kFreqFieldNumber = 3,
  };
  // repeated int32 tokens = 4;
  int tokens_size() const;
  private:
  int _internal_tokens_size() const;
  public:
  void clear_tokens();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tokens(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_tokens() const;
  void _internal_add_tokens(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_tokens();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 tokens(int index) const;
  void set_tokens(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_tokens(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      tokens() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_tokens();

  // repeated uint32 children = 5;
  int children_size() const;
  private:
  int _internal_children_size() const;
  public:
  void clear_children();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_children(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_children() const;
  void _internal_add_children(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_children();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 children(int index) const;
  void set_children(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_children(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      children() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_children();

  // optional uint32 node_index = 1;
  bool has_node_index() const;
  private:
  bool _internal_has_node_index() const;
  public:
  void clear_node_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 node_index() const;
  void set_node_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_node_index() const;
  void _internal_set_node_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 character = 2;
  bool has_character() const;
  private:
  bool _internal_has_character() const;
  public:
  void clear_character();
  ::PROTOBUF_NAMESPACE_ID::uint32 character() const;
  void set_character(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_character() const;
  void _internal_set_character(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 freq = 3;
  bool has_freq() const;
  private:
  bool _internal_has_freq() const;
  public:
  void clear_freq();
  ::PROTOBUF_NAMESPACE_ID::uint32 freq() const;
  void set_freq(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_freq() const;
  void _internal_set_freq(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TrieNode)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > tokens_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > children_;
  ::PROTOBUF_NAMESPACE_ID::uint32 node_index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 character_;
  ::PROTOBUF_NAMESPACE_ID::uint32 freq_;
  friend struct ::TableStruct_t9db_2eproto;
};
// -------------------------------------------------------------------

class T9Database PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:T9Database) */ {
 public:
  inline T9Database() : T9Database(nullptr) {};
  virtual ~T9Database();

  T9Database(const T9Database& from);
  T9Database(T9Database&& from) noexcept
    : T9Database() {
    *this = ::std::move(from);
  }

  inline T9Database& operator=(const T9Database& from) {
    CopyFrom(from);
    return *this;
  }
  inline T9Database& operator=(T9Database&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const T9Database& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const T9Database* internal_default_instance() {
    return reinterpret_cast<const T9Database*>(
               &_T9Database_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(T9Database& a, T9Database& b) {
    a.Swap(&b);
  }
  inline void Swap(T9Database* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(T9Database* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline T9Database* New() const final {
    return CreateMaybeMessage<T9Database>(nullptr);
  }

  T9Database* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<T9Database>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const T9Database& from);
  void MergeFrom(const T9Database& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(T9Database* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "T9Database";
  }
  protected:
  explicit T9Database(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_t9db_2eproto);
    return ::descriptor_table_t9db_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokensFieldNumber = 1,
    kRootsFieldNumber = 2,
    kTrieMemoryFieldNumber = 3,
  };
  // repeated .Token tokens = 1;
  int tokens_size() const;
  private:
  int _internal_tokens_size() const;
  public:
  void clear_tokens();
  ::Token* mutable_tokens(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Token >*
      mutable_tokens();
  private:
  const ::Token& _internal_tokens(int index) const;
  ::Token* _internal_add_tokens();
  public:
  const ::Token& tokens(int index) const;
  ::Token* add_tokens();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Token >&
      tokens() const;

  // repeated .TrieNode roots = 2;
  int roots_size() const;
  private:
  int _internal_roots_size() const;
  public:
  void clear_roots();
  ::TrieNode* mutable_roots(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TrieNode >*
      mutable_roots();
  private:
  const ::TrieNode& _internal_roots(int index) const;
  ::TrieNode* _internal_add_roots();
  public:
  const ::TrieNode& roots(int index) const;
  ::TrieNode* add_roots();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TrieNode >&
      roots() const;

  // repeated .TrieNode trie_memory = 3;
  int trie_memory_size() const;
  private:
  int _internal_trie_memory_size() const;
  public:
  void clear_trie_memory();
  ::TrieNode* mutable_trie_memory(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TrieNode >*
      mutable_trie_memory();
  private:
  const ::TrieNode& _internal_trie_memory(int index) const;
  ::TrieNode* _internal_add_trie_memory();
  public:
  const ::TrieNode& trie_memory(int index) const;
  ::TrieNode* add_trie_memory();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TrieNode >&
      trie_memory() const;

  // @@protoc_insertion_point(class_scope:T9Database)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Token > tokens_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TrieNode > roots_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TrieNode > trie_memory_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_t9db_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TokenEdge

// required int32 target_id = 1;
inline bool TokenEdge::_internal_has_target_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TokenEdge::has_target_id() const {
  return _internal_has_target_id();
}
inline void TokenEdge::clear_target_id() {
  target_id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TokenEdge::_internal_target_id() const {
  return target_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TokenEdge::target_id() const {
  // @@protoc_insertion_point(field_get:TokenEdge.target_id)
  return _internal_target_id();
}
inline void TokenEdge::_internal_set_target_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  target_id_ = value;
}
inline void TokenEdge::set_target_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_target_id(value);
  // @@protoc_insertion_point(field_set:TokenEdge.target_id)
}

// required uint32 freq = 2;
inline bool TokenEdge::_internal_has_freq() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TokenEdge::has_freq() const {
  return _internal_has_freq();
}
inline void TokenEdge::clear_freq() {
  freq_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TokenEdge::_internal_freq() const {
  return freq_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TokenEdge::freq() const {
  // @@protoc_insertion_point(field_get:TokenEdge.freq)
  return _internal_freq();
}
inline void TokenEdge::_internal_set_freq(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  freq_ = value;
}
inline void TokenEdge::set_freq(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_freq(value);
  // @@protoc_insertion_point(field_set:TokenEdge.freq)
}

// -------------------------------------------------------------------

// Token

// required int32 id = 1;
inline bool Token::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Token::has_id() const {
  return _internal_has_id();
}
inline void Token::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Token::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Token::id() const {
  // @@protoc_insertion_point(field_get:Token.id)
  return _internal_id();
}
inline void Token::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
}
inline void Token::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Token.id)
}

// required uint32 freq = 2;
inline bool Token::_internal_has_freq() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Token::has_freq() const {
  return _internal_has_freq();
}
inline void Token::clear_freq() {
  freq_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Token::_internal_freq() const {
  return freq_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Token::freq() const {
  // @@protoc_insertion_point(field_get:Token.freq)
  return _internal_freq();
}
inline void Token::_internal_set_freq(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  freq_ = value;
}
inline void Token::set_freq(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_freq(value);
  // @@protoc_insertion_point(field_set:Token.freq)
}

// required string value = 3;
inline bool Token::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Token::has_value() const {
  return _internal_has_value();
}
inline void Token::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Token::value() const {
  // @@protoc_insertion_point(field_get:Token.value)
  return _internal_value();
}
inline void Token::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:Token.value)
}
inline std::string* Token::mutable_value() {
  // @@protoc_insertion_point(field_mutable:Token.value)
  return _internal_mutable_value();
}
inline const std::string& Token::_internal_value() const {
  return value_.Get();
}
inline void Token::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Token::set_value(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Token.value)
}
inline void Token::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Token.value)
}
inline void Token::set_value(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Token.value)
}
inline std::string* Token::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000001u;
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Token::release_value() {
  // @@protoc_insertion_point(field_release:Token.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Token::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Token.value)
}
inline std::string* Token::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Token.value)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return value_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Token::unsafe_arena_set_allocated_value(
    std::string* value) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  value_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      value, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Token.value)
}

// repeated .TokenEdge edges = 4;
inline int Token::_internal_edges_size() const {
  return edges_.size();
}
inline int Token::edges_size() const {
  return _internal_edges_size();
}
inline void Token::clear_edges() {
  edges_.Clear();
}
inline ::TokenEdge* Token::mutable_edges(int index) {
  // @@protoc_insertion_point(field_mutable:Token.edges)
  return edges_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TokenEdge >*
Token::mutable_edges() {
  // @@protoc_insertion_point(field_mutable_list:Token.edges)
  return &edges_;
}
inline const ::TokenEdge& Token::_internal_edges(int index) const {
  return edges_.Get(index);
}
inline const ::TokenEdge& Token::edges(int index) const {
  // @@protoc_insertion_point(field_get:Token.edges)
  return _internal_edges(index);
}
inline ::TokenEdge* Token::_internal_add_edges() {
  return edges_.Add();
}
inline ::TokenEdge* Token::add_edges() {
  // @@protoc_insertion_point(field_add:Token.edges)
  return _internal_add_edges();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TokenEdge >&
Token::edges() const {
  // @@protoc_insertion_point(field_list:Token.edges)
  return edges_;
}

// -------------------------------------------------------------------

// TrieNode

// optional uint32 node_index = 1;
inline bool TrieNode::_internal_has_node_index() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TrieNode::has_node_index() const {
  return _internal_has_node_index();
}
inline void TrieNode::clear_node_index() {
  node_index_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TrieNode::_internal_node_index() const {
  return node_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TrieNode::node_index() const {
  // @@protoc_insertion_point(field_get:TrieNode.node_index)
  return _internal_node_index();
}
inline void TrieNode::_internal_set_node_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  node_index_ = value;
}
inline void TrieNode::set_node_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_node_index(value);
  // @@protoc_insertion_point(field_set:TrieNode.node_index)
}

// required uint32 character = 2;
inline bool TrieNode::_internal_has_character() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TrieNode::has_character() const {
  return _internal_has_character();
}
inline void TrieNode::clear_character() {
  character_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TrieNode::_internal_character() const {
  return character_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TrieNode::character() const {
  // @@protoc_insertion_point(field_get:TrieNode.character)
  return _internal_character();
}
inline void TrieNode::_internal_set_character(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  character_ = value;
}
inline void TrieNode::set_character(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_character(value);
  // @@protoc_insertion_point(field_set:TrieNode.character)
}

// required uint32 freq = 3;
inline bool TrieNode::_internal_has_freq() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TrieNode::has_freq() const {
  return _internal_has_freq();
}
inline void TrieNode::clear_freq() {
  freq_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TrieNode::_internal_freq() const {
  return freq_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TrieNode::freq() const {
  // @@protoc_insertion_point(field_get:TrieNode.freq)
  return _internal_freq();
}
inline void TrieNode::_internal_set_freq(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  freq_ = value;
}
inline void TrieNode::set_freq(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_freq(value);
  // @@protoc_insertion_point(field_set:TrieNode.freq)
}

// repeated int32 tokens = 4;
inline int TrieNode::_internal_tokens_size() const {
  return tokens_.size();
}
inline int TrieNode::tokens_size() const {
  return _internal_tokens_size();
}
inline void TrieNode::clear_tokens() {
  tokens_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrieNode::_internal_tokens(int index) const {
  return tokens_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrieNode::tokens(int index) const {
  // @@protoc_insertion_point(field_get:TrieNode.tokens)
  return _internal_tokens(index);
}
inline void TrieNode::set_tokens(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  tokens_.Set(index, value);
  // @@protoc_insertion_point(field_set:TrieNode.tokens)
}
inline void TrieNode::_internal_add_tokens(::PROTOBUF_NAMESPACE_ID::int32 value) {
  tokens_.Add(value);
}
inline void TrieNode::add_tokens(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_tokens(value);
  // @@protoc_insertion_point(field_add:TrieNode.tokens)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TrieNode::_internal_tokens() const {
  return tokens_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TrieNode::tokens() const {
  // @@protoc_insertion_point(field_list:TrieNode.tokens)
  return _internal_tokens();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TrieNode::_internal_mutable_tokens() {
  return &tokens_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TrieNode::mutable_tokens() {
  // @@protoc_insertion_point(field_mutable_list:TrieNode.tokens)
  return _internal_mutable_tokens();
}

// repeated uint32 children = 5;
inline int TrieNode::_internal_children_size() const {
  return children_.size();
}
inline int TrieNode::children_size() const {
  return _internal_children_size();
}
inline void TrieNode::clear_children() {
  children_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TrieNode::_internal_children(int index) const {
  return children_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TrieNode::children(int index) const {
  // @@protoc_insertion_point(field_get:TrieNode.children)
  return _internal_children(index);
}
inline void TrieNode::set_children(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  children_.Set(index, value);
  // @@protoc_insertion_point(field_set:TrieNode.children)
}
inline void TrieNode::_internal_add_children(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  children_.Add(value);
}
inline void TrieNode::add_children(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_children(value);
  // @@protoc_insertion_point(field_add:TrieNode.children)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
TrieNode::_internal_children() const {
  return children_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
TrieNode::children() const {
  // @@protoc_insertion_point(field_list:TrieNode.children)
  return _internal_children();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
TrieNode::_internal_mutable_children() {
  return &children_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
TrieNode::mutable_children() {
  // @@protoc_insertion_point(field_mutable_list:TrieNode.children)
  return _internal_mutable_children();
}

// -------------------------------------------------------------------

// T9Database

// repeated .Token tokens = 1;
inline int T9Database::_internal_tokens_size() const {
  return tokens_.size();
}
inline int T9Database::tokens_size() const {
  return _internal_tokens_size();
}
inline void T9Database::clear_tokens() {
  tokens_.Clear();
}
inline ::Token* T9Database::mutable_tokens(int index) {
  // @@protoc_insertion_point(field_mutable:T9Database.tokens)
  return tokens_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Token >*
T9Database::mutable_tokens() {
  // @@protoc_insertion_point(field_mutable_list:T9Database.tokens)
  return &tokens_;
}
inline const ::Token& T9Database::_internal_tokens(int index) const {
  return tokens_.Get(index);
}
inline const ::Token& T9Database::tokens(int index) const {
  // @@protoc_insertion_point(field_get:T9Database.tokens)
  return _internal_tokens(index);
}
inline ::Token* T9Database::_internal_add_tokens() {
  return tokens_.Add();
}
inline ::Token* T9Database::add_tokens() {
  // @@protoc_insertion_point(field_add:T9Database.tokens)
  return _internal_add_tokens();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Token >&
T9Database::tokens() const {
  // @@protoc_insertion_point(field_list:T9Database.tokens)
  return tokens_;
}

// repeated .TrieNode roots = 2;
inline int T9Database::_internal_roots_size() const {
  return roots_.size();
}
inline int T9Database::roots_size() const {
  return _internal_roots_size();
}
inline void T9Database::clear_roots() {
  roots_.Clear();
}
inline ::TrieNode* T9Database::mutable_roots(int index) {
  // @@protoc_insertion_point(field_mutable:T9Database.roots)
  return roots_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TrieNode >*
T9Database::mutable_roots() {
  // @@protoc_insertion_point(field_mutable_list:T9Database.roots)
  return &roots_;
}
inline const ::TrieNode& T9Database::_internal_roots(int index) const {
  return roots_.Get(index);
}
inline const ::TrieNode& T9Database::roots(int index) const {
  // @@protoc_insertion_point(field_get:T9Database.roots)
  return _internal_roots(index);
}
inline ::TrieNode* T9Database::_internal_add_roots() {
  return roots_.Add();
}
inline ::TrieNode* T9Database::add_roots() {
  // @@protoc_insertion_point(field_add:T9Database.roots)
  return _internal_add_roots();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TrieNode >&
T9Database::roots() const {
  // @@protoc_insertion_point(field_list:T9Database.roots)
  return roots_;
}

// repeated .TrieNode trie_memory = 3;
inline int T9Database::_internal_trie_memory_size() const {
  return trie_memory_.size();
}
inline int T9Database::trie_memory_size() const {
  return _internal_trie_memory_size();
}
inline void T9Database::clear_trie_memory() {
  trie_memory_.Clear();
}
inline ::TrieNode* T9Database::mutable_trie_memory(int index) {
  // @@protoc_insertion_point(field_mutable:T9Database.trie_memory)
  return trie_memory_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TrieNode >*
T9Database::mutable_trie_memory() {
  // @@protoc_insertion_point(field_mutable_list:T9Database.trie_memory)
  return &trie_memory_;
}
inline const ::TrieNode& T9Database::_internal_trie_memory(int index) const {
  return trie_memory_.Get(index);
}
inline const ::TrieNode& T9Database::trie_memory(int index) const {
  // @@protoc_insertion_point(field_get:T9Database.trie_memory)
  return _internal_trie_memory(index);
}
inline ::TrieNode* T9Database::_internal_add_trie_memory() {
  return trie_memory_.Add();
}
inline ::TrieNode* T9Database::add_trie_memory() {
  // @@protoc_insertion_point(field_add:T9Database.trie_memory)
  return _internal_add_trie_memory();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TrieNode >&
T9Database::trie_memory() const {
  // @@protoc_insertion_point(field_list:T9Database.trie_memory)
  return trie_memory_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_t9db_2eproto
